import type { Metadata } from "next";
import { Inter, JetBrains_Mono } from "next/font/google";
import "./globals.css";
import { RealtimePollProvider } from "../components/RealtimePollProvider";
import { gothamMedium, gothamUltra, goldplayBlack } from "../lib/fonts";

// Add version for cache busting
const CSS_VERSION = Date.now();

const inter = Inter({
  variable: "--font-inter",
  subsets: ["latin"],
});

const jetbrainsMono = JetBrains_Mono({
  variable: "--font-jetbrains-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
  viewport: {
    width: 'device-width',
    initialScale: 1,
    maximumScale: 1,
    userScalable: false,
    viewportFit: 'cover',
    interactiveWidget: 'resizes-content'
  },
  other: {
    'mobile-web-app-capable': 'yes',
    'apple-mobile-web-app-capable': 'yes',
    'apple-mobile-web-app-status-bar-style': 'black-translucent',
    'apple-mobile-web-app-title': 'YouthHub',
    'application-name': 'YouthHub',
    'msapplication-TileColor': '#000000',
    'theme-color': '#000000',
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0'
  }
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Force mobile browsers to reload and clear cache
              if (typeof window !== 'undefined') {
                // Clear any cached styles
                const links = document.querySelectorAll('link[rel="stylesheet"]');
                links.forEach(link => {
                  const href = link.getAttribute('href');
                  if (href) {
                    link.setAttribute('href', href + '?v=${CSS_VERSION}');
                  }
                });
                
                // Force reload on mobile if cache is detected
                if ('serviceWorker' in navigator) {
                  navigator.serviceWorker.getRegistrations().then(function(registrations) {
                    for(let registration of registrations) {
                      registration.unregister();
                    }
                  });
                }
                
                // Clear localStorage and sessionStorage
                localStorage.clear();
                sessionStorage.clear();
              }
              
              // Prevent pull-to-refresh on mobile devices
              document.addEventListener('DOMContentLoaded', function() {
                let startY = 0;
                let currentY = 0;
                
                document.addEventListener('touchstart', function(e) {
                  startY = e.touches[0].clientY;
                }, { passive: true });
                
                document.addEventListener('touchmove', function(e) {
                  currentY = e.touches[0].clientY;
                  
                  // Only prevent pull-to-refresh, allow normal scrolling
                  if (window.scrollY === 0 && currentY > startY) {
                    // Check if we're in a scrollable container
                    const target = e.target;
                    const scrollableParent = target.closest('.chat-scroll-container, .native-scroll-container');
                    
                    if (!scrollableParent) {
                      e.preventDefault();
                    }
                  }
                }, { passive: false });
                
                // Allow overscroll behavior for chat containers
                document.body.style.overscrollBehavior = 'contain';
                document.documentElement.style.overscrollBehavior = 'contain';
                
                // Mobile browser UI hiding
                function hideMobileBrowserUI() {
                  // Set viewport height to prevent address bar from showing
                  const vh = window.innerHeight * 0.01;
                  document.documentElement.style.setProperty('--vh', \`\${vh}px\`);
                  
                  // Add mobile app classes
                  document.body.classList.add('mobile-full-height');
                  
                  // Prevent address bar from showing on scroll
                  let lastScrollTop = 0;
                  window.addEventListener('scroll', function() {
                    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                    if (scrollTop > lastScrollTop) {
                      // Scrolling down - try to hide address bar
                      if (window.innerHeight < window.outerHeight) {
                        window.scrollTo(0, 1);
                      }
                    }
                    lastScrollTop = scrollTop;
                  });
                }
                
                // Hide mobile browser UI on load and resize
                if (window.innerWidth <= 768) {
                  hideMobileBrowserUI();
                  window.addEventListener('resize', hideMobileBrowserUI);
                  window.addEventListener('orientationchange', function() {
                    setTimeout(hideMobileBrowserUI, 100);
                  });
                }
                
                // iOS specific: prevent address bar from showing
                if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
                  // Prevent zoom on double tap
                  let lastTouchEnd = 0;
                  document.addEventListener('touchend', function(event) {
                    const now = (new Date()).getTime();
                    if (now - lastTouchEnd <= 300) {
                      event.preventDefault();
                    }
                    lastTouchEnd = now;
                  }, false);
                  
                  // Prevent address bar from showing
                  window.addEventListener('load', function() {
                    setTimeout(function() {
                      window.scrollTo(0, 1);
                    }, 0);
                  });
                }
              });
            `,
          }}
        />
      </head>
      <body
        className={`${inter.variable} ${jetbrainsMono.variable} ${gothamMedium.variable} ${gothamUltra.variable} ${goldplayBlack.variable} antialiased dark`}
      >
        <RealtimePollProvider>
          {children}
        </RealtimePollProvider>
      </body>
    </html>
  );
}
