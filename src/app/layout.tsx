import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { RealtimePollProvider } from "../components/RealtimePollProvider";
import { gothamMedium, gothamUltra, goldplayBlack } from "../lib/fonts";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
  viewport: {
    width: 'device-width',
    initialScale: 1,
    maximumScale: 1,
    userScalable: false,
    viewportFit: 'cover',
    interactiveWidget: 'resizes-content'
  }
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Prevent pull-to-refresh on mobile devices
              document.addEventListener('DOMContentLoaded', function() {
                let startY = 0;
                let currentY = 0;
                
                document.addEventListener('touchstart', function(e) {
                  startY = e.touches[0].clientY;
                }, { passive: false });
                
                document.addEventListener('touchmove', function(e) {
                  currentY = e.touches[0].clientY;
                  
                  // Prevent pull-to-refresh when scrolling up at the top
                  if (window.scrollY === 0 && currentY > startY) {
                    e.preventDefault();
                  }
                  
                  // Prevent pull-to-refresh when scrolling down at the bottom
                  if (window.scrollY + window.innerHeight >= document.documentElement.scrollHeight && currentY < startY) {
                    e.preventDefault();
                  }
                }, { passive: false });
                
                // Prevent overscroll behavior
                document.body.style.overscrollBehavior = 'none';
                document.documentElement.style.overscrollBehavior = 'none';
              });
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${gothamMedium.variable} ${gothamUltra.variable} ${goldplayBlack.variable} antialiased dark`}
      >
        <RealtimePollProvider>
          {children}
        </RealtimePollProvider>
      </body>
    </html>
  );
}
